package org.example;

/**
 * # Module 5. Java Collections Framework Part IV. Object serialization mechanism. Функциональное программирование. Streams
 *
 * Необходимо реализовать программу по перевозке кусочков удачи со склада А на склад В.
 * Условие задачи
 * 1.  В `Грузовике` есть один `Водитель` (он же грузчик)
 * 2.  `Грузовик` может увезти не более **10** `Коробок`
 * 3.  В каждой `Коробке` может быть 4 кусочка удачи
 * 4.  На `Складе` `А` располагается `10_591` кусочков удачи
 * 5.  Нужно перевезти со склада `А` на склад `B` все кусочки удачи
 * 6.  *(задача со звездочкой, делать не обязательно) Каждые 5 поездок склад А пополняется на 112 кусочков
 *     **Вопрос: Сколько раз грузовик cъездит на склад B?**
 *     (!) Важной частью решения задачи является вывод в консоль важных действий,
 *     например при погрузке коробок в машину важно выводить в консоль сообщения типа:
 * ```
 * > "Загружено 1/10 коробок"
 * > "Загружено 2/10 коробок"
 * > "Загружено 3/10 коробок"
 * ```
 *
 * Подсказки:
 * - Создайте класс `Truck` (Грузовик)
 * - Создайте класс `Box` (Коробка)
 * - Создайте класс `PieceLuck` (Один кусочек удачи)
 * - Создайте класс `Warehouse` (Склад)
 * - Создайте класс `Driver` (Водитель, он же Грузчик)
 * - Используйте `ArrayList`
 * - Подумайте об абстракциях и области ответственности каждого класса, например:
 *     - Грузовик не может сам в себя погрузить коробки, это делает Грузчик
 *     - Зато Грузовик знает о том сколько в него коробок уже загружено и сколько свободного места осталось
 *     - Driver умеет брать предметы и класть их куда-то, например он может взять `кусочек удачи` и положить его в коробку
 *     - Driver может посмотреть в коробку и понять сколько в ней места осталось (он, как бы спрашивает коробку `еще есть место?`, в ответ получает `Да есть`)
 * - Думайте :)
 */
public class Main
{
    public static void main( String[] args ) {
        PieceLuck pieceLuck = new PieceLuck(10_591);
        Warehouse warehouse = new Warehouse();
        Manager manager = new Manager();
        manager.startWork();
    }
}
